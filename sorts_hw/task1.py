"""
1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами на
промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком. Улучшенные версии
сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
"""
from random import shuffle


def bubble(array):
    '''
    в сортировку пузырьком добавлена переменная, проверяющая, были ли при проходе какие-нибудь обмены переменных
    местами. Если не было - смысл дальше ходить? Выходим из функции.
    Без этой переменной мы всегда проходим n**2 раз
    С нею можем отстреляться с первого захода.
    :param array:
    :return:
    '''
    j = 1
    while j < len(array):
        i = 0
        swpd = False
        while i < len(array) - j:
            if array[i] > array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                swpd = True
            i += 1
        j += 1
        if not swpd:
            print(j, i)  # тестовая строка - посмотрим, на каком проходе мы всё отсортировали
            break


spread = 100
ar = [i for i in range(-100, spread)]
shuffle(ar)
print(ar)
bubble(ar)
print(ar)
